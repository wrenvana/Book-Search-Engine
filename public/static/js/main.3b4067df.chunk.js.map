{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutation.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","error","console","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","handleSaveBook","bookToSave","find","Auth","loggedIn","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","QUERY_ME","SavedBooks","useQuery","loading","userData","data","takeBookOut","handleDeleteBook","variables","log","savedBooks","SignupForm","username","email","password","formState","setFormState","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b4067df.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\r\nimport decode from 'jwt-decode';\r\n\r\n// create a new class to instantiate for a user\r\nclass AuthService {\r\n  // get user data\r\n  getProfile() {\r\n    return decode(this.getToken());\r\n  }\r\n\r\n  // check if user's logged in\r\n  loggedIn() {\r\n    // Checks if there is a saved token and it's still valid\r\n    const token = this.getToken();\r\n    return !!token && !this.isTokenExpired(token); // handwaiving here\r\n  }\r\n\r\n  // check if token is expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = decode(token);\r\n      if (decoded.exp < Date.now() / 1000) {\r\n        return true;\r\n      } else return false;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken() {\r\n    // Retrieves the user token from localStorage\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  login(idToken) {\r\n    // Saves user token to localStorage\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/');\r\n  }\r\n\r\n  logout() {\r\n    // Clear user token and profile data from localStorage\r\n    localStorage.removeItem('id_token');\r\n    // this will reload the page and reset the state of the application\r\n    window.location.assign('/');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","export const getSavedBookIds = () => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : [];\r\n\r\n  return savedBookIds;\r\n};\r\n\r\nexport const saveBookIds = (bookIdArr) => {\r\n  if (bookIdArr.length) {\r\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\r\n  } else {\r\n    localStorage.removeItem('saved_books');\r\n  }\r\n};\r\n\r\nexport const removeBookId = (bookId) => {\r\n  const savedBookIds = localStorage.getItem('saved_books')\r\n    ? JSON.parse(localStorage.getItem('saved_books'))\r\n    : null;\r\n\r\n  if (!savedBookIds) {\r\n    return false;\r\n  }\r\n\r\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\r\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\r\n\r\n  return true;\r\n};\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const LOGIN_USER = gql`\r\n    mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n        token\r\n        user {\r\n        _id\r\n        username\r\n        email\r\n        }\r\n    }\r\n    }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n    mutation addUser($username: String!, $email: String!, $password: String!) {\r\n    addUser(username: $username, email: $email, password: $password) {\r\n        token\r\n        user {\r\n        _id\r\n        username\r\n        email\r\n        }\r\n    }\r\n    }\r\n`;\r\n\r\nexport const SAVE_BOOK = gql`\r\n    mutation saveBook($input: bookInput!) {\r\n    saveBook(input: $input) {\r\n        _id\r\n        username\r\n        savedBooks {\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        title\r\n        link\r\n        }\r\n    }\r\n    }\r\n`;\r\n\r\nexport const REMOVE_BOOK = gql`\r\n    mutation removeBook($bookId: String!) {\r\n    removeBook(bookId: $bookId) {\r\n        _id\r\n        username\r\n        savedBooks {\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        title\r\n        link\r\n        }\r\n    }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\r\n\r\nimport Auth from '../utils/auth';\r\nimport { searchGoogleBooks } from '../utils/API';\r\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { SAVE_BOOK } from \"../utils/mutation\";\r\n\r\nconst SearchBooks = () => {\r\n  const [searchedBooks, setSearchedBooks] = useState([]);\r\n  const [searchInput, setSearchInput] = useState('');\r\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\r\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\r\n  if (error) {\r\n    console.error(error)\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => saveBookIds(savedBookIds);\r\n  });\r\n\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (!searchInput) {\r\n      return false;\r\n    }\r\n    try {\r\n      const response = await searchGoogleBooks(searchInput);\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n      const { items } = await response.json();\r\n\r\n      const bookData = items.map((book) => ({\r\n        bookId: book.id,\r\n        authors: book.volumeInfo.authors || ['No author to display'],\r\n        title: book.volumeInfo.title,\r\n        description: book.volumeInfo.description,\r\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\r\n      }));\r\n\r\n      setSearchedBooks(bookData);\r\n      setSearchInput('');\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n\r\n  const handleSaveBook = async (bookId) => {\r\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\r\n\r\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\r\n\r\n    if (!token) {\r\n      return false;\r\n    }\r\n    try {\r\n      const response = await saveBook(bookToSave, token);\r\n      if (!response.ok) {\r\n        throw new Error('something went wrong!');\r\n      }\r\n\r\n\r\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Search for Books!</h1>\r\n          <Form onSubmit={handleFormSubmit}>\r\n            <Form.Row>\r\n              <Col xs={12} md={8}>\r\n                <Form.Control\r\n                  name='searchInput'\r\n                  value={searchInput}\r\n                  onChange={(e) => setSearchInput(e.target.value)}\r\n                  type='text'\r\n                  size='lg'\r\n                  placeholder='Search for a book'\r\n                />\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Button type='submit' variant='success' size='lg'>\r\n                  Submit Search\r\n                </Button>\r\n              </Col>\r\n            </Form.Row>\r\n          </Form>\r\n        </Container>\r\n      </Jumbotron>\r\n\r\n      <Container>\r\n        <h2>\r\n          {searchedBooks.length\r\n            ? `Viewing ${searchedBooks.length} results:`\r\n            : 'Search for a book to begin'}\r\n        </h2>\r\n        <CardColumns>\r\n          {searchedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? (\r\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\r\n                ) : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  {Auth.loggedIn() && (\r\n                    <Button\r\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\r\n                      className='btn-block btn-info'\r\n                      onClick={() => handleSaveBook(book.bookId)}>\r\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\r\n                        ? 'This book has already been saved!'\r\n                        : 'Save this Book!'}\r\n                    </Button>\r\n                  )}\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchBooks;\r\n","// route to get logged in user's info (needs the token)\r\nexport const getMe = (token) => {\r\n  return fetch('/api/users/me', {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\nexport const createUser = (userData) => {\r\n  return fetch('/api/users', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\nexport const loginUser = (userData) => {\r\n  return fetch('/api/users/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n};\r\n\r\n// save book data for a logged in user\r\nexport const saveBook = (bookData, token) => {\r\n  return fetch('/api/users', {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(bookData),\r\n  });\r\n};\r\n\r\n// remove saved book data for a logged in user\r\nexport const deleteBook = (bookId, token) => {\r\n  return fetch(`/api/users/books/${bookId}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n};\r\n\r\n// make a search to google books api\r\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\r\nexport const searchGoogleBooks = (query) => {\r\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\r\n};\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const QUERY_ME = gql`\r\n    query me {\r\n    me {\r\n        _id\r\n        username\r\n        email\r\n        bookCount\r\n        savedBooks {\r\n        authors\r\n        description\r\n        bookId\r\n        image\r\n        title\r\n        link\r\n        }\r\n    }\r\n    }`\r\n;","import React from 'react';\r\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\r\nimport { removeBookId } from '../utils/localStorage';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { REMOVE_BOOK } from '../utils/mutation';\r\nimport { QUERY_ME } from '../utils/queries';\r\n\r\nconst SavedBooks = () => {\r\n  const { loading, data: userData } = useQuery(QUERY_ME);\r\n  const [takeBookOut] = useMutation(REMOVE_BOOK);\r\n\r\n  const handleDeleteBook = async (bookId) => {\r\n  try {\r\n    await takeBookOut ({\r\n      variables: {bookId}\r\n    });\r\n\r\n    removeBookId(bookId);\r\n  } catch (err) {\r\n    console.err(err)\r\n  };\r\n  console.log(userData)\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <h2>Loading...</h2>\r\n      ) : !userData ? (\r\n        <h2>You must be logged in to view saved books</h2>\r\n      ) : (\r\n        <>\r\n      <Jumbotron fluid className='text-light bg-dark'>\r\n        <Container>\r\n          <h1>Viewing saved books!</h1>\r\n        </Container>\r\n      </Jumbotron>\r\n      <Container>\r\n        <h2>\r\n          {userData.savedBooks.length\r\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\r\n            : 'You have no saved books!'}\r\n        </h2>\r\n        <CardColumns>\r\n          {userData.savedBooks.map((book) => {\r\n            return (\r\n              <Card key={book.bookId} border='dark'>\r\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\r\n                <Card.Body>\r\n                  <Card.Title>{book.title}</Card.Title>\r\n                  <p className='small'>Authors: {book.authors}</p>\r\n                  <Card.Text>{book.description}</Card.Text>\r\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\r\n                    Delete this Book!\r\n                  </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            );\r\n          })}\r\n        </CardColumns>\r\n      </Container>\r\n    </>\r\n      )}\r\n      </>\r\n\r\n  );\r\n};\r\n\r\nexport default SavedBooks;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\n\r\nimport { ADD_USER } from '../utils/mutation';\r\nimport Auth from '../utils/auth';\r\n\r\nconst SignupForm = () => {\r\n  // set initial form state\r\n  const [formState, setFormState] = useState({ username: '', email: '', password: '' });\r\n  // set state for form validation\r\n  const [validated] = useState(false);\r\n  // set state for alert\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n  const [addUser, { error, data }] = useMutation(ADD_USER);\r\n  if (error) {\r\n    console.error(error)\r\n  }\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n  setFormState({\r\n    ...formState,\r\n    [name]: value,\r\n  });\r\n};\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await addUser({\r\n        variables: { ...formState }\r\n      });\r\n\r\n      if (error) {\r\n        console.error(error)\r\n      }\r\n\r\n      Auth.login(data.addUser.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      {/* This is needed for the validation functionality above */}\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        {/* show alert if server response is bad */}\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your signup!\r\n        </Alert>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='username'>Username</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your username'\r\n            name='username'\r\n            onChange={handleInputChange}\r\n            value={formState.username}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='email'\r\n            placeholder='Your email address'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={formState.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={formState.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(formState.username && formState.email && formState.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n","import React, { useState } from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\n\r\nimport { LOGIN_USER } from \"../utils/mutation\";\r\nimport Auth from '../utils/auth';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\n\r\nconst LoginForm = () => {\r\n  const [login, { error, data }] = useMutation(LOGIN_USER);\r\n  if (error) {\r\n    console.error(error)\r\n  }\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [validated] = useState(false);\r\n  const [showAlert, setShowAlert] = useState(false);\r\n\r\n\r\n\r\nconst handleInputChange = (event) => {\r\n  const { name, value } = event.target;\r\n\r\nsetFormState({\r\n  ...formState,\r\n  [name]: value,\r\n});\r\n};\r\n\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    try {\r\n      const { data } = await login({\r\n        variables: { ...formState }\r\n      });\r\n\r\n      Auth.login(data.login.token);\r\n    } catch (err) {\r\n      console.error(err);\r\n      setShowAlert(true);\r\n    }\r\n\r\n    setFormState({\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    });\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\r\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\r\n          Something went wrong with your login credentials!\r\n        </Alert>\r\n        <Form.Group>\r\n          <Form.Label htmlFor='email'>Email</Form.Label>\r\n          <Form.Control\r\n            type='text'\r\n            placeholder='Your email'\r\n            name='email'\r\n            onChange={handleInputChange}\r\n            value={formState.email}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label htmlFor='password'>Password</Form.Label>\r\n          <Form.Control\r\n            type='password'\r\n            placeholder='Your password'\r\n            name='password'\r\n            onChange={handleInputChange}\r\n            value={formState.password}\r\n            required\r\n          />\r\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Button\r\n          disabled={!(formState.email && formState.password)}\r\n          type='submit'\r\n          variant='success'>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\r\nimport SignUpForm from './SignupForm';\r\nimport LoginForm from './LoginForm';\r\n\r\nimport Auth from '../utils/auth';\r\n\r\nconst AppNavbar = () => {\r\n  // set modal display state\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg='dark' variant='dark' expand='lg'>\r\n        <Container fluid>\r\n          <Navbar.Brand as={Link} to='/'>\r\n            Google Books Search\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls='navbar' />\r\n          <Navbar.Collapse id='navbar'>\r\n            <Nav className='ml-auto'>\r\n              <Nav.Link as={Link} to='/'>\r\n                Search For Books\r\n              </Nav.Link>\r\n              {/* if user is logged in show saved books and logout */}\r\n              {Auth.loggedIn() ? (\r\n                <>\r\n                  <Nav.Link as={Link} to='/saved'>\r\n                    See Your Books\r\n                  </Nav.Link>\r\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\r\n                </>\r\n              ) : (\r\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\r\n              )}\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Container>\r\n      </Navbar>\r\n      {/* set modal data up */}\r\n      <Modal\r\n        size='lg'\r\n        show={showModal}\r\n        onHide={() => setShowModal(false)}\r\n        aria-labelledby='signup-modal'>\r\n        {/* tab container to do either signup or login component */}\r\n        <Tab.Container defaultActiveKey='login'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id='signup-modal'>\r\n              <Nav variant='pills'>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Tab.Content>\r\n              <Tab.Pane eventKey='login'>\r\n                <LoginForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n              <Tab.Pane eventKey='signup'>\r\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\r\n              </Tab.Pane>\r\n            </Tab.Content>\r\n          </Modal.Body>\r\n        </Tab.Container>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppNavbar;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\r\nimport SearchBooks from './pages/SearchBooks';\r\nimport SavedBooks from './pages/SavedBooks';\r\nimport Navbar from './components/Navbar';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\n\r\n\r\nconst client = new ApolloClient({\r\n  uri: '/graphql',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n    <Router>\r\n      <>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path='/' component={SearchBooks} />\r\n          <Route exact path='/saved' component={SavedBooks} />\r\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\r\n        </Switch>\r\n      </>\r\n    </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}